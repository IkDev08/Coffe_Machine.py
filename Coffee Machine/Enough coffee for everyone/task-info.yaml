type: edu
custom_name: stage3
files:
- name: machine/coffee_machine.py
  visible: true
  text: |+
    water = input(""+
        "Write how many ml of water the coffee machine has:")
    milk = input(""+
        "Write how many ml of milk the coffee machine has:")
    coffee = input(""+
        "Write how many grams of coffee beans the coffee machine has:")
    cups = int(input(""+
        "Write how many cups of coffee you will need:"))
    supplies = [(int(water) // 200), (int(milk) // 50), (int(coffee) // 15)]
    rest = int(min(supplies)) - int(cups)



    if min(supplies) == 0:
        print("No, I can make only 0 cups of coffee")
    elif min(supplies) != 0:
        if min(supplies) == cups:
            print("Yes, I can make that amount of coffee")
        elif min(supplies) > cups:
            print("Yes, I can make that amount of coffee (and even", rest ,"more than that)")
        elif min(supplies) < cups:
            print("No, I can make only", min(supplies) ,"cups of coffee")

  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    ('300\n65\n111\n1\n', (True, 0, True)),
                    ('600\n153\n100\n1', (True, 2, True)),
                    ('1400\n150\n100\n1', (True, 2, True)),
                    ('1400\n1500\n45\n1', (True, 2, True)),
                    ('599\n250\n200\n10', (False, 2, True)),
                    ('34564\n43423\n23234\n1', (True, 171, True)),
                    ('345640\n434230\n23234\n1', (True, 1547, True)),
                    ('345640\n43423\n23234\n19246', (False, 868, True)),

                    ('399\n112\n111\n1', (True, 0, False)),
                    ('2400\n249\n100\n1', (True, 3, False)),
                    ('1400\n1500\n44\n1', (True, 1, False)),
                    ('500\n250\n200\n10', (False, 2, False)),
                    ('600\n250\n200\n10', (False, 3, False)),
                    ('345640\n43423\n23234\n1', (True, 867, False)),
                    ('345640\n434230\n23234\n19246', (False, 1548, False)),
                    ('34564\n43423\n23234\n19246', (False, 172, False)),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            user_output = reply.split(':')[-1].strip()
            lowered_output = user_output.lower()
            ans, amount, show_tests = clue
            if ans:
                if amount > 0:
                    is_correct = f'{amount}' in lowered_output and 'yes' in lowered_output
                    if is_correct:
                        if f'{amount}.' in lowered_output:
                            return CheckResult.wrong(
                                "There is a dot after an amount of cups. "
                                "There should be no dot.\n"
                                "Your output:\n" +
                                user_output
                            )
                        return CheckResult.correct()

                    else:
                        right_output = (
                            "Yes, I can make that amount of coffee" +
                            f" (and even {amount} more than that)"
                        )

                        if show_tests:
                            return CheckResult.wrong(
                                "Your output:\n" +
                                user_output +
                                "\nRight output:\n" +
                                right_output
                            )

                        else:
                            return CheckResult.wrong('')
                if 'yes' in lowered_output:
                    return CheckResult.correct()
                else:
                    right_output = (
                        "Yes, I can make that amount of coffee"
                    )

                    if show_tests:
                        return CheckResult.wrong(
                            "Your output:\n" +
                            user_output +
                            "\nRight output:\n" +
                            right_output
                        )

                    else:
                        return CheckResult.wrong('')

            else:
                cond1 = 'no' in lowered_output
                cond2 = str(amount) in lowered_output

                if cond1 and cond2:
                    if f'{amount}.' in lowered_output:
                        return CheckResult.wrong(
                            "There is a dot after an amount of cups. "
                            "There should be no dot.\n"
                            "Your output:\n" +
                            user_output
                        )
                    return CheckResult.correct()

                else:
                    right_output = (
                        "No, I can make only " +
                        f"{amount} cup(s) of coffee"
                    )

                    if show_tests:
                        return CheckResult.wrong(
                            "Your output:\n" +
                            user_output +
                            "\nRight output:\n" +
                            right_output
                        )
                    else:
                        return CheckResult.wrong('')


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/68/stages/368/implement
status: Solved
record: 3
